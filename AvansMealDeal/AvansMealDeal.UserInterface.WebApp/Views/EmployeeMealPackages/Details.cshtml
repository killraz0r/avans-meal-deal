@using AvansMealDeal.Domain.Models
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject UserManager<MealDealUser> UserManager
@model EmployeeMealPackageDetailsViewModel

<!-- the canteen of the employee needs to be known because an employee can only edit/remove packages in their own canteen -->
@{
	var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
	var user = await UserManager.FindByIdAsync(userId ?? string.Empty);
	var employeeCanteenId = user?.EmployeeCanteenId;
}

<!-- meal package details form -->
@using (Html.BeginForm("Edit", "EmployeeMealPackages", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
	<div asp-validation-summary="All"></div>
	<br />
	<form asp-action="Edit" method="post">
		<!-- needed id values for editing to work -->
		<input type="hidden" asp-for="Id" />
		<input type="hidden" asp-for="ReservationId" />
		<input type="hidden" asp-for="CanteenId" />

		<!-- name -->
		<label asp-for="Name">Naam:</label>
		<input asp-for="Name" />
		<span asp-validation-for="Name"></span>
		<br />

		<!-- price -->
		<label asp-for="Price">Prijs: â‚¬</label>
		<input asp-for="Price" type="number" min="0.01" max="9999.99" step="0.01" />
		<span asp-validation-for="Price"></span>
		<br />

		<!-- meal package type -->
		@if (Model.CanteenOffersHotMeals)
		{
			<label asp-for="MealPackageType">Type maaltijdpakket:</label>
			<select asp-for="MealPackageType" asp-items="Html.GetEnumSelectList<MealPackageType>()"></select>
		}
		else
		{
			<label asp-for="MealPackageType">Type maaltijdpakket (deze kantine biedt geen warme maaltijden aan):</label>
			<!-- canteen offers no hot meals, so remove HotMeal from the dropdown (the value inside the dropdown is a string version of the enum int value) -->
			<select asp-for="MealPackageType" asp-items="Html.GetEnumSelectList<MealPackageType>().Where(x => x.Value != ((int)MealPackageType.HotMeal).ToString())"></select>
		}
		<span asp-validation-for="MealPackageType"></span>
		<br />

		<!-- pickup deadline -->
		@{
			// deadline input should be between now and 48 hours in the future
			var now = DateTimeOffset.Now;
			var minValue = now.AddMinutes(5).ToString("yyyy-MM-ddTHH:mm"); // add five minutes for better user experience (otherwise, pickup deadline could be in the past when user submits form)
			var maxValue = now.AddHours(48).ToString("yyyy-MM-ddTHH:mm");
		}
		<label asp-for="PickupDeadline">Deadline:</label>
		<input asp-for="PickupDeadline" min="@minValue" max="@maxValue" value="@Model.PickupDeadline!.Value.ToString("yyyy-MM-ddTHH:mm")" type="datetime-local" />
		<span asp-validation-for="PickupDeadline"></span>
		<br />

		<!-- meals to add to the meal package -->
		<table>
			<thead>
				<tr>
					<th>Foto   </th>
					<th>Naam   </th>
					<th>Bevat alcohol   </th>
					<th>Onderdeel van maaltijdpakket?   </th>
				</tr>
			</thead>
			<tbody>
				@foreach (var meal in Model.SystemMeals)
				{
					var mealIsSelectedInPackage = Model.SelectedMeals.Any(x => x.Id == meal.Id);
					@await Html.PartialAsync("_EmployeeMealPackageMeal", new EmployeeMealPackageMealViewModel(meal, mealIsSelectedInPackage))
				}
			</tbody>
		</table>

		<!-- only show edit/remove buttons if employee is allowed to -->
		@if (!Model.HasReservation && Model.MatchesCanteen(employeeCanteenId))
		{
			<button>Bewerk</button>
		}
		else if (Model.HasReservation)
		{
			<h3>Het maaltijdpakket heeft een reservering en kan dus niet bewerkt of verwijderd worden</h3>
		}
		else if (!Model.MatchesCanteen(employeeCanteenId))
		{
			<h3>Het maaltijdpakket komt uit een andere kantine en kan dus niet bewerkt of verwijderd worden</h3>
		}
	</form>
	@if (!Model.HasReservation && Model.MatchesCanteen(employeeCanteenId))
	{
		<form asp-action="Remove" method="post">
			<input type="hidden" asp-for="Id" />
			<button>Verwijder</button>
		</form>
	}
}